package com.slc.afea.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECT_RECORD".
*/
public class CollectRecordDao extends AbstractDao<CollectRecord, Long> {

    public static final String TABLENAME = "COLLECT_RECORD";

    /**
     * Properties of entity CollectRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RecordId = new Property(0, long.class, "recordId", true, "_id");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Collect = new Property(3, int.class, "collect", false, "COLLECT");
        public final static Property OperateType = new Property(4, int.class, "operateType", false, "OPERATE_TYPE");
    }


    public CollectRecordDao(DaoConfig config) {
        super(config);
    }
    
    public CollectRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECT_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: recordId
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"NAME\" TEXT," + // 2: name
                "\"COLLECT\" INTEGER NOT NULL ," + // 3: collect
                "\"OPERATE_TYPE\" INTEGER NOT NULL );"); // 4: operateType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECT_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRecordId());
        stmt.bindLong(2, entity.getTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getCollect());
        stmt.bindLong(5, entity.getOperateType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRecordId());
        stmt.bindLong(2, entity.getTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getCollect());
        stmt.bindLong(5, entity.getOperateType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CollectRecord readEntity(Cursor cursor, int offset) {
        CollectRecord entity = new CollectRecord( //
            cursor.getLong(offset + 0), // recordId
            cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // collect
            cursor.getInt(offset + 4) // operateType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectRecord entity, int offset) {
        entity.setRecordId(cursor.getLong(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCollect(cursor.getInt(offset + 3));
        entity.setOperateType(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CollectRecord entity, long rowId) {
        entity.setRecordId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CollectRecord entity) {
        if(entity != null) {
            return entity.getRecordId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollectRecord entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
